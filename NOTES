Potential improvements for rpc2:

   * based on GSL rather than ccmath

   * arbitrary precision integers

   * arbitrary precision rationals (is this useful?)

   * separate threads for GUI and calc, so computations
     can be interrupted (useful?)

   * slightly improved UI

   * better error messages

------------------------------------------------------------------------

New interface ideas (see "display-sample.txt"):

   * Design for 80 columns; separate window panels for stack (right
     (side?) and some sort of status/help window (left side)

   * Reserve a function entry key.  The current behavior allows one
     to just start typing a function name, e.g. "ex" -> exp( ).  This
     behavior will not work well with custom keybindings.

     New behavior: use a key such as 'f' to indicate function entry.
     So the user types "fex" -> exp( ).  It involves more keypresses
     initially, but there will be fewer key binding conflicts to worry
     about.  Also, the extra keypresses could be factored away if some
     sort of macro system is involved, e.g.

         macro "x" "fex<enter>"

     would permit the user to bind exp to a single press of 'x'.

   * What about the status panel?  It should contain a list of
     calculator flags, for one thing (integer arithmetic base, complex
     display format, etc.), but this won't take up much room.  Perhaps a
     list of common function names?

   * Color is probably not very helpful; boldface seems to work well to
     set things off.

   * Provide smarter errors when possible, like "incompatible matrix
     dimensions for MULT" or "incompatible arguments for ADD"





# arch-tag: DO_NOT_CHANGE_26d2d56c-11b2-40d0-aa03-3bfc572cf9e0 
